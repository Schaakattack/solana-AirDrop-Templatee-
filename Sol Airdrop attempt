use solana_sdk::{
    account_info::AccountInfo,
    account_utils::StateMutability,
    pubkey::Pubkey,
    sysvar::rent::Rent,
};

#[derive(Debug, PartialEq)]
pub struct Airdrop {
    // The owner of the contract is the person who created the contract
    pub owner: Pubkey,
    // The number of tokens to be airdropped
    pub tokens: u64,
    // A list of airdropped addresses
    pub airdropped_addresses: Vec<Pubkey>,
    // A nonce to prevent double-spending
    pub nonce: u64,
    // The program id of the contract
    pub program_id: Pubkey,
}

impl Airdrop {
    // Constructor function to create a new Airdrop instance
    pub fn new(owner: Pubkey, tokens: u64, program_id: Pubkey) -> Self {
        Self { 
            owner, 
            tokens, 
            airdropped_addresses: vec![],
            nonce: 0,
            program_id
        }
    }

    // Function to update the number of tokens in the airdrop
    pub fn set_tokens(&mut self, tokens: u64) {
        self.tokens = tokens;
    }

    // Function to check the balance of the contract account before attempting to transfer the tokens to the receiver account
    pub fn check_contract_balance(&self, contract_account: &AccountInfo) -> Result<(), String> {
        if contract_account.lamports < self.tokens {
            return Err("Not enough tokens in contract account".to_string());
        }
        Ok(())
    }

    // Function to use the Rent struct to check the account's rent before using the account and to ensure that it does not exceed the limit
    pub fn check_account_rent(&self, account: &AccountInfo) -> Result<(), String> {
        let rent = Rent::from_account(account);
        if rent.exceeded() {
            return Err("Account rent exceeded".to_string());
        }
        Ok(())
    }

    // Function to check that the program id is the one that you expect
    pub fn check_program_id(&self, program_id: &Pubkey) -> Result<(), String> {
        if program_id != &self.program_id {
            return Err("Invalid program id".to_string());
        }
        Ok(())
    }

    // Function to check if the receiver account has already received an airdrop
    pub fn check_double_spend(&self, receiver_pubkey: &Pubkey) -> Result<(), String> {
        if self.airdropped_addresses.contains(receiver_pubkey) {
            return Err("Receiver has already received an airdrop".to_string());
        }
        Ok(())
        // Add the receiver account to the list of airdropped addresses
        self.airdropped_addresses.push(receiver_pubkey.clone());
        // Increment the nonce to prevent future double-spending
        self.nonce += 1;
        Ok(())
    }

    // Function to check the number of tokens in the receiver account before the airdrop
    pub fn check_receiver_balance(&self, receiver_account: &AccountInfo) -> Result<(), String> {
        if receiver_account.lamports != 0 {
            return Err("Receiver account must be empty".to_string());
        }
        Ok(())
    }

    // Main function that is called when the contract is executed on the Solana network
    pub fn process_instruction(&mut self, _program_id: &Pubkey, accounts: &[AccountInfo]) -> Result<(), String> {
        // Check that the instruction is being signed by the contract owner
        let signer = &accounts[0].signed;
        if signer != &self.owner {
            return Err("Unauthorized".to_string());
        }

        let program_id = &accounts[0].owner;
        self.check_program_id(program_id)?;

        // Check that the correct number of accounts are present in the instruction
        if accounts.len() != 3 {
            return Err("Invalid number of accounts".to_string());
        }

        // Check that the first account is the contract account
        let contract_account = &accounts[0];
        if contract_account.is_signer {
            return Err("Invalid contract account".to_string());
        }
        if contract_account.owner != _program_id {
            return Err("Invalid contract owner".to_string());
        }
        self.check_contract_balance(contract_account)?;
        self.check_account_rent(contract_account)?;

        // Check that the second account is the receiver account
        let receiver_account = &accounts[1];
        if !receiver_account.is_signer {
            return Err("Invalid receiver account".to_
        //Check the balance and the rent of the receiver account
        self.check_receiver_balance(receiver_account)?;
        self.check_account_rent(receiver_account)?;
        self.check_double_spend(&receiver_account.signed)?;
        
        // Transfer the tokens from the contract account to the receiver account
        contract_account.lamports -= self.tokens;
        receiver_account.lamports += self.tokens;
        
        // Add the receiver account to the list of airdropped addresses
        self.airdropped_addresses.push(receiver_account.signed.clone());
        // Increment the nonce to prevent future double-spending
        self.nonce += 1;
        Ok(())
    }
}

solana_sdk::declare_program!(
    "AirdropProgram",
    solana_sdk::bpf_loader::id(),
    Airdrop::process_instruction
);

//the end


